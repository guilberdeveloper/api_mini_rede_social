// Importações necessárias
const express = require("express");
const { createServer } = require("http");
const { Server } = require("ws");
const { connection, conectarBanco } = require('./db');

// Conecta ao banco de dados
conectarBanco();

const bodyParser = require('body-parser');
const app = express();
const httpServer = createServer(app);

// habilitando o body parser
app.use(bodyParser.json());

// Habilitando CORS para o Express
const cors = require("cors");
app.use(cors());

// Configurando o CORS para o WebSocket
const wss = new Server({ server: httpServer });

// Mapa para armazenar as conexões WebSocket dos usuários
const userConnections = {};

// Função para encontrar amigos de um usuário no banco de dados
async function findUserFriends(userId) {
  return new Promise((resolve, reject) => {
    connection.query('SELECT amigo_id FROM amigos WHERE usuario_id = ?', [userId], (error, results) => {
      if (error) {
        reject(error);
      } else {
        const friendIds = results.map(result => result.amigo_id);
        resolve(friendIds);
      }
    });
  });
}

// Trata a conexão WebSocket
wss.on('connection', async function connection(ws, req) {
  console.log('Cliente conectado ao servidor de WebSocket');
  const userId = req.url.split('/')[1]; // Obtém o ID do usuário da URL
  
  // Armazena a conexão WebSocket no mapa de conexões
  userConnections[userId] = ws;

  // Encontra os amigos do usuário conectado
  const friendIds = await findUserFriends(userId);
  
  // Envia a lista de amigos para o cliente recém-conectado
  ws.send(JSON.stringify({ friends: friendIds }));

  ws.on('message', function incoming(message) {
    console.log('Recebido: %s', message);
    const data = JSON.parse(message);
    // Verifica se a mensagem é para mandar para outro usuário
    if (data.receiver && userConnections[data.receiver]) {
      userConnections[data.receiver].send(JSON.stringify({
        sender: data.sender,
        message: data.message
      }));
    }
  });

  ws.on('close', function close() {
    console.log('Cliente desconectado');
    // Remove a conexão do mapa de conexões ao desconectar
    delete userConnections[userId];
  });
});

// Rota para enviar mensagem para outro usuário
app.post("/send-message", async (req, res) => {
  const { sender, receiver, message } = req.body;
  // Verifica se o destinatário está online
  if (userConnections[receiver]) {
    // Envia a mensagem para o destinatário
    userConnections[receiver].send(JSON.stringify({ sender, message }));
    res.status(200).json({ success: true });
  } else {
    res.status(404).json({ success: false, message: "Destinatário não encontrado ou offline." });
  }
});

// rotas Publicas
const publicRoutes = require("./routes/publicRoutes");
app.use("/api", publicRoutes);

app.get("/", (req, res) => {
  res.send("Hello World!");
});

httpServer.listen(3000, () => {
  console.log("Servidor está rodando na porta 3000");
});
